# Generated by Django 3.2.25 on 2025-02-16 14:50

from django.db import migrations, models
import django.db.models.deletion
import logging


def migrate_ports_to_ip(apps, schema_editor):
    """Migrate M2M relationship to ForeignKey, duplicating ports if needed."""
    Port = apps.get_model('startScan', 'Port')
    IPAddress = apps.get_model('startScan', 'IPAddress')
    # Explicit retrieval of the intermediate model
    IPPortM2M = apps.get_model('startScan', 'ipaddress_ports')
    logger = logging.getLogger(__name__)
    
    logger.info(f"Starting port migration for {IPAddress.objects.count()} IP addresses")
    
    # Use the original intermediate table
    for ip in IPAddress.objects.all().iterator():
        logger.debug(f"Processing IP {ip.id} - {ip.address}")
        port_relations = IPPortM2M.objects.filter(ipaddress_id=ip.id)
        logger.debug(f"Found {port_relations.count()} ports for this IP")
        
        for relation in port_relations:
            port = Port.objects.get(id=relation.port_id)
            if port.ip_address is not None:
                logger.debug(f"Duplicating port {port.id} (number: {port.number})")
                new_port = Port.objects.create(
                    number=port.number,
                    service_name=port.service_name,
                    description=port.description,
                    is_uncommon=port.is_uncommon,
                    ip_address=ip
                )
                logger.debug(f"Created new port {new_port.id} for IP {ip.id}")
            else:
                logger.debug(f"Assigning IP {ip.id} to port {port.id}")
                port.ip_address = ip
                port.save()
                
    logger.info("Migration completed successfully")


class Migration(migrations.Migration):

    dependencies = [
        ('startScan', '0058_alter_ipaddress_ports'),
    ]

    operations = [
        # Step 1: Create the new ForeignKey column (nullable temporarily)
        migrations.AddField(
            model_name='port',
            name='ip_address',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ports', to='startScan.ipaddress'),
        ),
        
        # Step 2: Migration of data with duplication if necessary
        migrations.RunPython(
            code=migrate_ports_to_ip,
            reverse_code=migrations.RunPython.noop
        ),
        
        # Step 3: Delete the old M2M field
        migrations.RemoveField(
            model_name='ipaddress',
            name='ports',
        ),
        
        # Step 4: Add the unique constraint
        migrations.AlterUniqueTogether(
            name='port',
            unique_together={('ip_address', 'number')},
        ),
    ]
