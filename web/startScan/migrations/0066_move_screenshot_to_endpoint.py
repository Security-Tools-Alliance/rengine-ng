# Generated by Django 3.2.25 on 2025-07-23 15:05

from django.db import migrations, models


def transfer_screenshots_to_endpoints(apps, schema_editor):
    """Transfer screenshot data from subdomains to corresponding endpoints."""
    # Get models at the state they were during this migration
    Subdomain = apps.get_model("startScan", "Subdomain")
    EndPoint = apps.get_model("startScan", "EndPoint")

    # Check if there are any subdomains with screenshots to transfer
    subdomains_with_screenshots = Subdomain.objects.exclude(screenshot_path__isnull=True).exclude(screenshot_path="")

    if not subdomains_with_screenshots.exists():
        print("No screenshots to transfer")
        return

    transferred_count = 0
    for subdomain in subdomains_with_screenshots:
        # Find matching endpoints for this subdomain
        endpoints = EndPoint.objects.filter(subdomain=subdomain, scan_history=subdomain.scan_history)

        if endpoints.exists():
            # Priority order for endpoint selection:
            # 1. Default endpoints (is_default=True)
            # 2. Endpoints matching subdomain's http_url
            # 3. First available endpoint

            target_endpoint = None

            # Try default endpoints first
            default_endpoints = endpoints.filter(is_default=True)
            if default_endpoints.exists():
                target_endpoint = default_endpoints.first()

            # Try to match by URL
            elif subdomain.http_url:
                matching_endpoints = endpoints.filter(http_url=subdomain.http_url)
                if matching_endpoints.exists():
                    target_endpoint = matching_endpoints.first()

            # Fallback to first endpoint
            if not target_endpoint:
                target_endpoint = endpoints.first()

            # Transfer the screenshot
            if target_endpoint:
                target_endpoint.screenshot_path = subdomain.screenshot_path
                target_endpoint.save()
                transferred_count += 1
                print(f"✓ Transferred screenshot: {subdomain.name} → {target_endpoint.http_url}")
        else:
            print(f"⚠ No endpoints found for subdomain {subdomain.name}, skipping screenshot")

    print(f"Successfully transferred {transferred_count} screenshots from subdomains to endpoints")


def reverse_transfer_screenshots(apps, schema_editor):
    """Reverse migration: clear endpoint screenshots."""
    EndPoint = apps.get_model("startScan", "EndPoint")

    # Clear all screenshots from endpoints
    endpoints_with_screenshots = EndPoint.objects.exclude(screenshot_path__isnull=True)
    count = endpoints_with_screenshots.count()
    if count > 0:
        endpoints_with_screenshots.update(screenshot_path=None)
        print(f"Cleared {count} screenshots from endpoints during reverse migration")
    else:
        print("No endpoint screenshots to clear")


class Migration(migrations.Migration):
    dependencies = [
        ("startScan", "0065_alter_scanhistory_scan_status"),
    ]

    operations = [
        migrations.AddField(
            model_name="endpoint",
            name="screenshot_path",
            field=models.CharField(blank=True, max_length=1000, null=True),
        ),
        migrations.RunPython(
            transfer_screenshots_to_endpoints,
            reverse_transfer_screenshots,
        ),
        migrations.RemoveField(
            model_name="subdomain",
            name="screenshot_path",
        ),
    ]
