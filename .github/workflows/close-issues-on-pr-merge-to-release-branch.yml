name: Close issues on PR merge to release branch

on:
  pull_request:
    types:
      - closed

jobs:
  close-related-issues:
    runs-on: ubuntu-22.04
    if: github.event.pull_request.merged == true && startsWith(github.event.pull_request.base.ref, 'release/')
    permissions:
      issues: write
      contents: read
    steps:
      - name: Extract and close all linked issues
        run: |
          # Debug information
          echo "=== Debug Information ==="
          echo "PR Number: ${{ github.event.pull_request.number }}"
          echo "Source Branch: ${{ github.event.pull_request.head.ref }}"
          echo "Target Branch: ${{ github.event.pull_request.base.ref }}"
          echo "Repository: ${{ github.repository }}"
          echo "Repository Owner: ${{ github.repository_owner }}"
          echo "Repository Name: ${{ github.event.repository.name }}"
          echo "========================="
          
          # Get linked issues using GitHub's GraphQL API
          # This matches exactly what GitHub shows in "Successfully merging this pull request may close these issues"
          
          echo "Fetching GitHub-linked issues..."
          
          # Check if jq is installed
          if ! command -v jq >/dev/null 2>&1; then
            echo "Error: jq is not installed. Please install jq to run this script."
            exit 1
          fi
          
          # Use GraphQL to get the exact same data GitHub shows in the UI
          graphql_response=$(curl -s -X POST \
            -H "Accept: application/vnd.github.v4+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -d '{
              "query": "query($owner: String!, $repo: String!, $number: Int!) { 
                repository(owner: $owner, name: $repo) { 
                  pullRequest(number: $number) { 
                    closingIssuesReferences(first: 100) { 
                      nodes { 
                        number 
                      } 
                    } 
                  } 
                } 
              }",
              "variables": {
                "owner": "${{ github.repository_owner }}",
                "repo": "${{ github.event.repository.name }}",
                "number": ${{ github.event.pull_request.number }}
              }
            }' \
            https://api.github.com/graphql)
          
          # Debug: Show the raw GraphQL response
          echo "GraphQL Response: $graphql_response"
          
          # Check for GraphQL errors or malformed response
          if ! echo "$graphql_response" | jq . >/dev/null 2>&1; then
            echo "Error: Malformed JSON response from GitHub GraphQL API"
            echo "$graphql_response"
            exit 1
          fi

          if [ "$(echo "$graphql_response" | jq '.errors')" != "null" ]; then
            echo "Error(s) returned from GitHub GraphQL API:"
            echo "$graphql_response" | jq '.errors'
            exit 1
          fi
          
          # Extract issue numbers from GraphQL response, handling null closingIssuesReferences
          issue_numbers=$(echo "$graphql_response" | jq -r '
            if .data.repository.pullRequest.closingIssuesReferences then 
              .data.repository.pullRequest.closingIssuesReferences.nodes[].number 
            else 
              empty 
            end' | sort -u)
          
          if [ -z "$issue_numbers" ]; then
            echo "No linked issues found via GraphQL. Trying fallback method..."
            
            # Fallback: Check PR description for closing keywords
            pr_body="${{ github.event.pull_request.body }}"
            echo "PR Body: $pr_body"
            
            # Extract issue numbers from PR body using common closing keywords
            fallback_issues=$(echo "$pr_body" | grep -ioE '(close[sd]?|fix(e[sd])?|resolve[sd]?) #[0-9]+' | grep -oE '#[0-9]+' | sed 's/#//' | sort -u)
            
            if [ -n "$fallback_issues" ]; then
              echo "Found issues via fallback method: $fallback_issues"
              issue_numbers="$fallback_issues"
            else
              echo "No linked issues found that would be closed by GitHub's automatic linking or PR body keywords"
              exit 0
            fi
          fi
          
          echo "Found GitHub-linked issues: $issue_numbers"
          
          # Close each issue individually
          for issue_number in $issue_numbers; do
            if [ -n "$issue_number" ]; then
              echo "Closing issue #$issue_number"
              
              # Close the issue using robust HTTP response handling
              close_tmpfile=$(mktemp)
              close_headers=$(mktemp)
              curl -s -D "$close_headers" -o "$close_tmpfile" -X PATCH \
                -H "Accept: application/vnd.github.v3+json" \
                -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                "https://api.github.com/repos/${{ github.repository }}/issues/$issue_number" \
                -d '{"state":"closed"}'

              close_http_code=$(awk 'NR==1 {print $2}' "$close_headers")

              if [ "$close_http_code" = "200" ]; then
                echo "✅ Successfully closed issue #$issue_number"
                
                # Add a comment to explain why the issue was closed using robust HTTP response handling
                comment_tmpfile=$(mktemp)
                comment_headers=$(mktemp)
                curl -s -D "$comment_headers" -o "$comment_tmpfile" -X POST \
                  -H "Accept: application/vnd.github.v3+json" \
                  -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                  -H "X-GitHub-Api-Version: 2022-11-28" \
                  "https://api.github.com/repos/${{ github.repository }}/issues/$issue_number/comments" \
                  -d "{\"body\":\"This issue is being closed because the related PR #${{ github.event.pull_request.number }} has been merged into a release branch (\`${{ github.event.pull_request.base.ref }}\`).\"}"

                comment_http_code=$(awk 'NR==1 {print $2}' "$comment_headers")

                if [ "$comment_http_code" = "201" ]; then
                  echo "✅ Added comment to issue #$issue_number"
                else
                  echo "⚠️ Failed to add comment to issue #$issue_number (HTTP $comment_http_code)"
                  echo "Comment response: $(cat "$comment_tmpfile")"
                fi
                
                # Clean up comment temp files
                rm -f "$comment_tmpfile" "$comment_headers"
              else
                echo "❌ Failed to close issue #$issue_number (HTTP $close_http_code)"
                echo "Close response: $(cat "$close_tmpfile")"
              fi
              
              # Clean up close temp files
              rm -f "$close_tmpfile" "$close_headers"
            fi
          done
